////////////////////////////////////////////////////////////////////////////////
//! \file
//!
//! \author	Mauro Fiorentini
//!
//! \date	26/10/2018
//!
//! \par	Function:
//!	It contains the declaration of the io_space::VotesFile class.
//!
////////////////////////////////////////////////////////////////////////////////

# if !defined	VOTES_FILE_H

# define	VOTES_FILE_H

# include	"Parameter.h"
# include	"FatalException.h"
# include	"IOException.h"
# include	"ApplicationException.h"
# include	"File.h"
# include	"Vector.h"
# include	"OrderedVector.h"
# include	"RandomGenerator.h"
# include	"Cryptography.h"

namespace	io_space
{

////////////////////////////////////////////////////////////////////////////////
//! \struct	VoteData
//!	The VoteData struct contains the votes of a voter.
//!
////////////////////////////////////////////////////////////////////////////////

struct	SimpleVoteData
	{
//! \property	Voter
//!	Index of the voter.
	std_uint		Voter;

//! \property	Vote
//!	Vector of the votes.
	Vector<std_uint>	Vote;
	};

////////////////////////////////////////////////////////////////////////////////
//! \struct	VoteData
//!	The VoteData struct contains all the data about the vote of a voter.
//!
////////////////////////////////////////////////////////////////////////////////

struct	VoteData: public SimpleVoteData
	{
//! \property	Signature
//!	Signature of the voter.
//!
//! \see	SIGNATURE_LENGTH
	byte			Signature [SIGNATURE_LENGTH];
	};

using	namespace	utility_space;
using	namespace	application_space;

////////////////////////////////////////////////////////////////////////////////
//! \class	VotesFile
//!	The VotesFile class represents a File containing the votes.
//!
//! \fileformat
//! \see	VotersFileFormat
//!
////////////////////////////////////////////////////////////////////////////////

class	VotesFile: private File
	{
	private:

//! \property	Candidates
//!	Number of candidates.
			std_uint		Candidates;

//! \property	Voters
//!	Number of voters.
			std_uint		Voters;

//! \property	MaximumVote
//!	Maximum possible vote.
			std_uint		MaximumVote;

//! \property	RecordLength
//!	Length of the record of a voter.
			std_uint		RecordLength;

//! \property	VotesBlocks
//!	Number of cryptography blocks used for the votes.
			std_uint		VotesBlocks;

//! \property	SignatureBlocks
//!	Number of cryptography blocks used for the signature.
			std_uint		SignatureBlocks;

//! \property	IndexGenerator
//!	Random number generator used to select indices of votes to be modified.
//!
//! \note
//!	The sequence generated by this generator must depend only upon the keys
//!	and the real voterindex , so that it always generates the same sequence
//!	of numbers for a given voter.
//!
			RandomGenerator 	IndexGenerator;

//! \property	Encoder
//!	Encoder used to crypt and decrypt the file.
			Cryptography		Encoder;

//! \property	RandomIndex
//!	Array containing the random indices of votes to be modified.
			Vector<std_uint>	RandomIndex;

//! \property	OrderedIndex
//!	OrderedArray containing the random indices of votes to be modified.
			OrderedVector<std_uint>	OrderedIndex;

					VotesFile(const VotesFile& Argument)
						noexcept = delete;

					VotesFile(VotesFile&& Argument)
						noexcept = delete;

			VotesFile&	operator = (const VotesFile& Argument)
						noexcept = delete;

			VotesFile&	operator = (VotesFile&& Argument)
						noexcept = delete;

			void		WriteSingleVote(register const VoteData&
						CurrentVote,
						register RandomGenerator&
						FillerGenerator)
						throw(FatalException,
						IOException);

		static	byte		MakeVote(std_uint Vote,
						RandomGenerator& Generator)
						noexcept;

		static	std_uint	GetVote(byte EncodedVote) noexcept;

	public:

					VotesFile(void) throw(FatalException);

					~VotesFile(void) throw(FatalException,
						IOException);

			void		Create(const CharString& thisPathName,
						register std_uint
						thisCandidates,
						register std_uint Voters,
						const byte Key
						[ENCRYPTION_KEY_LENGTH],
						register RandomGenerator&
						Generator) throw(FatalException,
						IOException);

			void		Open(const CharString& thisPathName,
						std_uint thisCandidates,
						std_uint thisVoters,
						std_uint thisMaximumVote,
						const byte Key
						[ENCRYPTION_KEY_LENGTH])
						throw(FatalException,
						IOException,
						ApplicationException);

			void		Read(std_uint Voter,
						register Vector<std_uint>& Vote)
						throw(FatalException,
						IOException,
						ApplicationException);

			void		Read(std_uint Voter,
						register VoteData& CurrentVote)
						throw(FatalException,
						IOException,
						ApplicationException);

			void		WriteVote(const VoteData& CurrentVote,
						const byte VotersKey
						[ENCRYPTION_KEY_LENGTH],
						const byte VotesKey
						[ENCRYPTION_KEY_LENGTH],
						register RandomGenerator&
						FillerGenerator)
						throw(FatalException,
						IOException,
						ApplicationException);

			void		Modify(std_uint Voter, RandomGenerator&
						FillerGenerator)
						throw(FatalException,
						IOException,
						ApplicationException);

			using		File::Close;

			using		File::SystemFlush;

	};

}

# if defined	USE_INLINE
# include	"VotesFile.inl"
# endif

# endif
